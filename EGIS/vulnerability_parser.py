import csv
from io import StringIO
from datetime import datetime
from loguru import logger

class VulnerabilityParser:
    def __init__(self, csv_content, scan_name, scan_details=None):
        self.csv_content = csv_content.decode('utf-8') if isinstance(csv_content, bytes) else csv_content
        self.scan_name = scan_name
        self.scan_details = scan_details or {}  # Optional scan details from Nessus API
        logger.debug(f"Initializing vulnerability parser for scan: {scan_name}")

    def parse(self):
        # Parse CSV content into structured format for report generation
        logger.info("Parsing CSV vulnerability data")
        csv_file = StringIO(self.csv_content)
        reader = csv.DictReader(csv_file)
        
        # Process CSV data
        hosts = {}
        vuln_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
        
        for row in reader:
            # Get or create host entry
            host_ip = row.get("Host", "")
            if host_ip not in hosts:
                hosts[host_ip] = {
                    "ip": host_ip,
                    "hostname": host_ip,
                    "vulnerabilities": [],
                    "open_ports": set(),
                    "critical_count": 0,
                    "high_count": 0,
                    "medium_count": 0,
                    "low_count": 0
                }
            
            # Parse port as integer and add to open ports regardless of risk level
            port = None
            try:
                port_str = row.get("Port", "")
                if port_str:
                    if '-' in port_str:
                        port = int(port_str.split('-')[0])
                    else:
                        port = int(port_str)
                    # Add port to open ports for all risk levels including Info
                    if port:
                        hosts[host_ip]["open_ports"].add(port)
            except (ValueError, TypeError):
                pass
            
            # Skip Info and None vulnerabilities for counts and vulnerability details
            risk = row.get("Risk", "")
            if risk in ["Info", "None"]:
                continue
                
            # Parse CVEs
            cve_raw = row.get("CVE", "")
            cves = []
            if cve_raw and cve_raw.strip() not in ["", "N/A"]:
                cves = [cve.strip() for cve in cve_raw.split(",") if cve.strip()]
            
            # Parse CVSS score
            cvss_score = self._safe_float(row.get("CVSS v2.0 Base Score", "0"))
            
            # Parse "See Also" field and other references
            see_also = row.get("See Also", "")
            if not see_also or see_also.strip() in ["", "N/A"]:
                see_also = ""
            
            # Create vulnerability object
            vuln = {
                "plugin_id": row.get("Plugin ID", ""),
                "name": row.get("Name", ""),
                "severity": risk,
                "cvss_score": cvss_score,
                "description": row.get("Description", ""),
                "solution": row.get("Solution", ""),
                "port": port,
                "protocol": row.get("Protocol", ""),
                "synopsis": row.get("Synopsis", ""),
                "cve": cves,
                "plugin_output": row.get("Plugin Output", ""),
                "see_also": see_also
            }
            
            # Add vulnerability to host
            hosts[host_ip]["vulnerabilities"].append(vuln)
            
            # Update severity counts
            if risk == "Critical":
                hosts[host_ip]["critical_count"] += 1
                vuln_counts["Critical"] += 1
            elif risk == "High":
                hosts[host_ip]["high_count"] += 1
                vuln_counts["High"] += 1
            elif risk == "Medium":
                hosts[host_ip]["medium_count"] += 1
                vuln_counts["Medium"] += 1
            elif risk == "Low":
                hosts[host_ip]["low_count"] += 1
                vuln_counts["Low"] += 1
        
        # Convert sets to lists for JSON serialization
        for host in hosts.values():
            host["open_ports"] = sorted(list(host["open_ports"]))
            # Calculate total vulnerability count for each host (excluding Info)
            host["vuln_count"] = host["critical_count"] + host["high_count"] + host["medium_count"] + host["low_count"]
        
        # Get scan times from Nessus API if available, otherwise use current time
        scan_info = self.scan_details.get("info", {})
        
        # Parse scan start and end times from scan details
        timezone = "UTC"
        start_timestamp = scan_info.get("timestamp", 0)
        end_timestamp = scan_info.get("scan_end", start_timestamp)
        
        if start_timestamp:
            start_time = datetime.fromtimestamp(start_timestamp)
            scan_start_date = start_time.strftime('%Y-%m-%d')
            scan_start_time = start_time.strftime('%H:%M')
        else:
            now = datetime.now()
            scan_start_date = now.strftime('%Y-%m-%d')
            scan_start_time = now.strftime('%H:%M')
        
        if end_timestamp and end_timestamp != start_timestamp:
            end_time = datetime.fromtimestamp(end_timestamp)
            scan_end_date = end_time.strftime('%Y-%m-%d')
            scan_end_time = end_time.strftime('%H:%M')
        else:
            now = datetime.now()
            scan_end_date = now.strftime('%Y-%m-%d')
            scan_end_time = now.strftime('%H:%M')
            
        # Create the final result structure
        result = {
            "scan_name": self.scan_name,
            "scan_start_date": scan_start_date,
            "scan_start_time": scan_start_time,
            "scan_end_date": scan_end_date,
            "scan_end_time": scan_end_time,
            "timezone": timezone,
            "scanner_name": scan_info.get("scanner_name", "Nessus"),
            "policy": scan_info.get("policy", "Advanced Scan"),
            "targets": list(hosts.keys()),
            "vuln_counts": vuln_counts,
            "hosts": list(hosts.values()),
            "executive_summary": {
                "total_hosts": len(hosts),
                "total_vulnerabilities": sum(vuln_counts.values()),
                "critical_count": vuln_counts["Critical"],
                "high_count": vuln_counts["High"],
                "medium_count": vuln_counts["Medium"],
                "low_count": vuln_counts["Low"],
                "hosts_with_critical": sum(1 for h in hosts.values() if h["critical_count"] > 0),
                "hosts_with_high": sum(1 for h in hosts.values() if h["high_count"] > 0)
            }
        }
        
        logger.info(f"Parsed {sum(vuln_counts.values())} vulnerabilities from CSV")
        return result
    
    def _safe_float(self, value):
        # Safely convert string to float
        try:
            return float(value)
        except (ValueError, TypeError):
            return 0.0
            
    def _extract_plugin_family(self, description):
        # Extract plugin family from description if possible
        common_families = {
            "SSL": "General",
            "TLS": "General",
            "SSH": "Misc.",
            "HTTP": "Web Servers",
            "FTP": "FTP",
            "SMB": "Windows",
            "Samba": "General",
            "DNS": "DNS",
            "SMTP": "SMTP problems"
        }
        
        for keyword, family in common_families.items():
            if keyword in description:
                return family
                
        return "Other" 